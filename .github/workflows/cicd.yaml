name: Build and Deploy with BuildKit

on:
  push:
    branches:
      - devops

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY_GHCR: ghcr.io
  REGISTRY_GITLAB: registry.gitlab.com
  IMAGE_NAME_DOCKER: ${{ secrets.DOCKER_USERNAME }}/demo-app
  # IMAGE_NAME_GHCR: ghcr.io/${{ github.repository }}/demo-app
  # IMAGE_NAME_GITLAB: registry.gitlab.com/${{ github.repository }}/demo-app

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    container:
      image: moby/buildkit:rootless
      options: --security-opt seccomp=unconfined --security-opt apparmor=unconfined

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Write Dockerfile from Secret
        run: |
          echo "${{ secrets.DOCKERFILE_DEMO_APP }}" > Dockerfile

      - name: Build and Push Images
        run: |
          buildctl build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --output type=image,name=${{ env.IMAGE_NAME_DOCKER }}:latest,push=true \
            --output type=image,name=${{ env.IMAGE_NAME_GHCR }}:latest,push=true \
            --output type=image,name=${{ env.IMAGE_NAME_GITLAB }}:latest,push=true

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      #   with:
      #     buildkitd-flags: --allow-insecure-entitlement security.insecure --rootless

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
#
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY_GHCR }}
      #     username: ${{ secrets.GITHUB_USERNAME }}
      #     password: ${{ secrets.GHCR_TOKEN }}

      # - name: Login to GitLab Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY_GITLAB }}
      #     username: ${{ secrets.GITLAB_USERNAME }}
      #     password: ${{ secrets.GITLAB_TOKEN }}

      # - name: Write Dockerfile from Secret
      #   run: |
      #     echo "${{ secrets.DOCKERFILE_CONTENT }}" > Dockerfile

      # - name: Build and push image to Docker Hub with BuildKit
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --tag ${{ env.IMAGE_NAME_DOCKER }}:${{ github.sha }} \
      #       --tag ${{ env.IMAGE_NAME_DOCKER }}:latest \
      #       --push \
      #       --build-arg BUILDKIT_INLINE_CACHE=1 \
      #       --security-opt seccomp=unconfined \
      #       .

      # - name: Build and push image to GHCR with BuildKit
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --tag ${{ env.IMAGE_NAME_GHCR }}:${{ github.sha }} \
      #       --tag ${{ env.IMAGE_NAME_GHCR }}:latest \
      #       --push \
      #       --build-arg BUILDKIT_INLINE_CACHE=1 \
      #       --security-opt seccomp=unconfined \
      #       .

      # - name: Build and push image to GitLab CR with BuildKit
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --tag ${{ env.IMAGE_NAME_GITLAB }}:${{ github.sha }} \
      #       --tag ${{ env.IMAGE_NAME_GITLAB }}:latest \
      #       --push \
      #       --build-arg BUILDKIT_INLINE_CACHE=1 \
      #       --security-opt seccomp=unconfined \
      #       .

      # - name: Test the image
      #   run: |
      #     docker run --rm -p 8080:8080 ${{ env.IMAGE_NAME_DOCKER }}:${{ github.sha }} && \
      #     curl -f http://localhost:8080/
      #   continue-on-error: true
      
      # - name: Setup kubectl
      #   uses: azure/setup-kubectl@v3
      # - name: Deploy to Kubernetes
      #   env:
      #     KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      #     NAMESPACE: ${{ secrets.NAMESPACE }}
      #   run: |
      #     mkdir -p ~/.kube
      #     echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
      #     # Update deployment YAML with the latest Docker Hub image
      #     sed -i "s|image: .*|image: ${{ env.IMAGE_NAME_DOCKER }}:${{ github.sha }}|" k8s/deployment.yaml
      #     kubectl apply -f k8s/deployment.yaml -n "$NAMESPACE"
      #     kubectl apply -f k8s/service.yaml -n "$NAMESPACE"
      #     kubectl rollout status deployment/my-spring-app -n "$NAMESPACE"
      #   working-directory: ./k8s